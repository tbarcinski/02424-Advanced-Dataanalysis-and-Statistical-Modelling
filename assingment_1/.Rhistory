df$pow_obs))
plot(df$pow_obs, transformation_1_inverse(FIXED_LAMBDA, df$pow_trans))
### Plotting stuff ###
plot(df$pow_obs, type = "l")
plot(df$pow_trans, type = "l")
par(mfrow=c(2,2))
hist(df$pow_obs)
qqnorm(df$pow_obs)
hist(df$pow_trans)
qqnorm(df$pow_trans)
par(mfrow=c(1,1))
#### Linear models #####
lm_original <- lm(pow_obs ~ poly(ws30, 2), data = df)
lm_trans <- lm(pow_trans ~ poly(ws30, 2), data = df)
new_data <- data.frame(
ws30 = seq(from = min(df$ws30), to = max(df$ws30), length.out = 200),
ws30_2 = seq(from = min(df$ws30), to = max(df$ws30), length.out = 200)^2
)
pred_lm2 <- data.frame(
predict(lm_trans, newdata = new_data,
interval = "prediction"))
# Transformed domain ws30 vs power
plot(pow_trans ~ ws30, data = df)
lines(pred_lm2[,1] ~ new_data$ws30, col = "blue")
lines(pred_lm2[,2] ~ new_data$ws30, col = "blue", lty=2)
lines(pred_lm2[,3] ~ new_data$ws30, col = "blue", lty=2)
# Original domain ws30 vs power
plot(pow_obs ~ ws30, data = df)
lines(transformation_1_inverse(FIXED_LAMBDA, pred_lm2[,1]) ~ new_data$ws30, col = "blue")
lines(transformation_1_inverse(FIXED_LAMBDA, pred_lm2[,2]) ~ new_data$ws30, col = "blue", lty=2)
lines(transformation_1_inverse(FIXED_LAMBDA, pred_lm2[,3]) ~ new_data$ws30, col = "blue", lty=2)
plot(df$pow_obs, type = "l")
lines(transformation_1_inverse(FIXED_LAMBDA, lm_trans$fitted.values),
col = "red")
plot(df$pow_trans, lm_trans$fitted.values)
abline(0, 1)
####### ARIMA ##############
arima_fit <- arima(df$pow_trans, xreg = model.matrix(lm_trans)[, c(2, 3)],
order = c(1, 0, 0))
auto_arima <- auto.arima(df$pow_trans)
## Plotting the residuals and their corelation
par(mfrow = c(3, 2))
plot(lm_trans$residuals, type = "l")
Acf(lm_trans$residuals)
plot(arima_fit$residuals)
Acf(arima_fit$residuals)
plot(auto_arima$residuals, type = "l")
Acf(auto_arima$residuals)
par(mfrow=c(1,1))
Box.test(lm_trans$residuals)
Box.test(arima_fit$residuals)
Box.test(auto_arima$residuals)
##### Plotting everything together ###########
plot(pow_trans ~ ws30, data = df)
lines(pred_lm2[,1] ~ new_data$ws30, col = "blue")
plot(pow_obs ~ ws30, data = df)
lines(transformation_1_inverse(FIXED_LAMBDA, pred_lm2[,1]) ~ new_data$ws30, col = "blue")
pred_arima <- data.frame(predict(arima_fit, newdata = model.matrix(lm_trans)[, c(2, 3)]))
pred_arima <- data.frame(predict(arima_fit, newxreg = new_data))
new_data
dim(new_data)
pred_arima <- data.frame(predict(arima_fit, newxreg = new_data, n.ahead = 10))
pred_arima <- data.frame(predict(arima_fit, newxreg = new_data, n.ahead = 2))
pred_arima <- data.frame(predict(arima_fit, newxreg = new_data,
n.ahead = dim(new_data)[1]))
plot(pow_trans ~ ws30, data = df)
lines(pred_lm2[,1] ~ new_data$ws30, col = "blue")
lines(pred_arima ~ new_data$ws30, col = "red")
pred_arima
plot(pow_trans ~ ws30, data = df)
lines(pred_lm2[,1] ~ new_data$ws30, col = "blue")
lines(pred_arima[,1] ~ new_data$ws30, col = "red")
arima_fit$code
arima_fit$coef
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1])) %*% arima$coef[,c(2, 3, 4)]
arima$coef
names(arima)
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1])) %*% arima_fit$coef[,c(2, 3, 4)]
length(arima_fit$coef)
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1])) %*% arima_fit$coef[c(2, 3, 4)]
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1])) %*% arima_fit$coef[c(2, 3, 4)]
arima_fit$coef[c(2, 3, 4)]
as.numeric(arima_fit$coef[c(2, 3, 4)])
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1])) %*%
as.numeric(arima_fit$coef[c(2, 3, 4)])
dim(data.frame(rep(1, dim(new_data)[1])))
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1]), new_data) %*%
as.numeric(arima_fit$coef[c(2, 3, 4)])
dim(data.frame(rep(1, dim(new_data)[1]), new_data))
as.matrix(as.numeric(arima_fit$coef[c(2, 3, 4)]))
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1]), new_data) %*%
as.matrix(arima_fit$coef[c(2, 3, 4)])
as.matrix(arima_fit$coef[c(2, 3, 4)])
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1]), new_data) %*%
as.matrix(as.numeric(arima_fit$coef[c(2, 3, 4)]))
fitted_arima_line <- data.frame(rep(1, dim(new_data)[1]), new_data) %*%
as.matrix(as.numeric(arima_fit$coef[c(2, 3, 4)]))
fitted_arima_line <- as.matrix(rep(1, dim(new_data)[1]), new_data) %*%
as.matrix(as.numeric(arima_fit$coef[c(2, 3, 4)]))
dim(as.matrix(rep(1, dim(new_data)[1]), new_data))
dim(as.matrix.data.frame(rep(1, dim(new_data)[1]), new_data))
dim(as.matrix(data.frame(rep(1, dim(new_data)[1]), new_data)))
fitted_arima_line <- as.matrix(data.frame(rep(1, dim(new_data)[1]), new_data)) %*%
as.matrix(as.numeric(arima_fit$coef[c(2, 3, 4)]))
fitted_arima_line
plot(pow_trans ~ ws30, data = df)
lines(pred_lm2[,1] ~ new_data$ws30, col = "blue")
lines(fitted_arima_line ~ new_data$ws30, col = "red")
pred_lm2[,1]
fitted_arima_line
arima_fit$coef
lm_trans$coefficients
head(new_data)
names(arima_fit)
plot(df$pow_trans, type = "l")
lines(df$pow_trans - arima_fit$residuals, col = "red")
plot(df$pow_trans, type = "l")
lines(lm_trans$fitted.values, col = "blue")
lines(df$pow_trans - arima_fit$residuals, col = "red")
names(auto_arima)
arima_fit <- Arima(df$pow_trans, xreg = model.matrix(lm_trans)[, c(2, 3)],
order = c(1, 0, 0))
names(arima_fit)
arima_fit
plot(df$pow_trans, type = "l")
lines(lm_trans$fitted.values, col = "blue")
lines(arima_fit$fitted, col = "red")
lines(auto_arima$fitted, col = "green")
auto_arima$aic
auto_arima
auto.arima
?auto.arima
auto_arima <- auto.arima(df$pow_trans, xreg = model.matrix(lm_trans)[, c(2, 3)])
par(mfrow = c(3, 2))
plot(lm_trans$residuals, type = "l")
Acf(lm_trans$residuals)
plot(arima_fit$residuals)
Acf(arima_fit$residuals)
plot(auto_arima$residuals, type = "l")
Acf(auto_arima$residuals)
par(mfrow=c(1,1))
Box.test(lm_trans$residuals)
Box.test(arima_fit$residuals)
Box.test(auto_arima$residuals)
plot(df$pow_trans, type = "l")
lines(lm_trans$fitted.values, col = "blue")
lines(arima_fit$fitted, col = "red")
lines(auto_arima$fitted, col = "green")
number <- 150
plot(df$pow_trans[1:number], type = "l")
lines(lm_trans$fitted.values[1:number], col = "blue")
lines(arima_fit$fitted[1:number], col = "red")
lines(auto_arima$fitted[1:number], col = "green")
number <- 50
plot(df$pow_trans[1:number], type = "l")
lines(lm_trans$fitted.values[1:number], col = "blue")
lines(arima_fit$fitted[1:number], col = "red")
lines(auto_arima$fitted[1:number], col = "green")
auto_arima
summary(lm_trans)
table <- cbind(
c(AIC(lm_trans), arima_fit$aic, auto_arima$aic),
c(BIC(lm_trans), arima_fit$bic, auto_arima$bic)
)
rownames(table) <- c("LM", "Arima", "Auto Arima")
table
table <- cbind(
c(AIC(lm_trans), arima_fit$aic, auto_arima$aic),
c(BIC(lm_trans), arima_fit$bic, auto_arima$bic)
)
rownames(table) <- c("LM", "Arima", "Auto Arima")
colnames(table) <- c("AIC", "BIC")
table
dim(df)
df_train <- head(df, 250)
df_test <- tail(df, dim(df)[1] - 250)
c(dim(df_train), dim(df_test))
train_size <- 268
df_train <- head(df, train_size)
df_test <- tail(df, dim(df)[1] - train_size)
c(dim(df_train), dim(df_test))
lm_original <- lm(pow_obs ~ poly(ws30, 2), data = df_train)
lm_trans <- lm(pow_trans ~ poly(ws30, 2), data = df_train)
new_data <- data.frame(
ws30 = seq(from = min(df$ws30), to = max(df$ws30), length.out = 200),
ws30_2 = seq(from = min(df$ws30), to = max(df$ws30), length.out = 200)^2
)
pred_lm2 <- data.frame(
predict(lm_trans, newdata = new_data,
interval = "prediction"))
plot(pow_trans ~ ws30, data = df)
lines(pred_lm2[,1] ~ new_data$ws30, col = "blue")
lines(pred_lm2[,2] ~ new_data$ws30, col = "blue", lty=2)
lines(pred_lm2[,3] ~ new_data$ws30, col = "blue", lty=2)
plot(pow_trans, data = df)
plot(pow_trans, data = df)
plot(df$pow_trans)
plot(df$pow_trans, type = "line")
abline(v = train_size)
abline(v = train_size, col = "red")
lines(pred_lm2[,1] ~ new_data$ws30, col = "blue")
plot(df$pow_trans, type = "line")
abline(v = train_size, col = "red")
lines(pred_lm2[,1] ~ new_data$ws30, col = "blue")
plot(df$pow_trans, type = "line")
abline(v = train_size, col = "red")
lines(pred_lm2[,1], col = "blue")
plot(df$pow_trans, type = "line")
abline(v = train_size, col = "red")
plot(pred_lm2[,1], type = "line", col = "blue")
new_data
head(df_test)
pred_lm_test <- data.frame(
predict(lm_trans, newdata = data.frame(
ws30 = df_test$ws30,
ws30_2 = df_test$ws30^2
), interval = "prediction"))
plot(df$pow_trans, type = "line")
abline(v = train_size, col = "red")
plot(pred_lm_test[,1], type = "line", col = "blue")
plot(df$pow_trans, type = "line")
abline(v = train_size, col = "red")
plot(df$pow_trans, type = "line")
abline(v = train_size, col = "red")
plot(pred_lm_test[,1], type = "line", col = "blue", xlim = c(number, dim(df)[1]))
plot(df$pow_trans, type = "l")
abline(v = train_size, col = "red")
plot(pred_lm_test[,1], type = "l", col = "blue",
xlim = c(number, dim(df)[1]))
plot(c(df$pow_trans, pred_lm_test[,1]), type = "l")
abline(v = train_size, col = "red")
lines(c(df_train$pow_trans, pred_lm_test[,1]), col = "blue")
dim(pred_lm_test[,1])
length(pred_lm_test[,1])
plot(df$pow_trans, type = "l")
abline(v = train_size, col = "red")
lines(pred_lm_test[,1], type = "l", col = "blue",
xlim = c(number, dim(df)[1]))
?lines
plot(df$pow_trans, type = "l")
abline(v = train_size, col = "red")
lines(x = seq(number, dim(df)[1]), y = pred_lm_test[,1],
type = "l", col = "blue")
length(seq(number, dim(df)[1]))
number
plot(df$pow_trans, type = "l")
abline(v = train_size, col = "red")
lines(x = seq(train_size, dim(df)[1]), y = pred_lm_test[,1],
type = "l", col = "blue")
length(seq(train_size, dim(df)[1]))
dim(pred_lm_test[,1])
length(pred_lm_test[,1])
plot(df$pow_trans, type = "l")
abline(v = train_size, col = "red")
lines(x = seq(train_size + 1, dim(df)[1]), y = pred_lm_test[,1],
type = "l", col = "blue")
hist(df$pow_obs)
hist(df$pow_obs, bins = 100)
?hist
hist(df$pow_obs, breaks = 50)
hist(df$pow_obs, breaks = 70)
hist(df$pow_obs, breaks = 100)
range(df$pow.obs)
range(df$pow_obs)
hist(df$pow_trans, breaks = 100)
plot(df$pow_trans, type = "l")
abline(v = train_size, col = "red")
lines(x = seq(train_size + 1, dim(df)[1]), y = pred_lm_test[,1],
type = "l", col = "blue")
plot(df$pow_trans)
plot(df$pow_trans, type = "l", pch = 1)
plot(df$pow_trans, pch = 1, type = "l")
plot(df$pow_trans, pch = 1)
lines(df$pow_transcol = "gray")
plot(df$pow_trans, pch = 1)
lines(df$pow_trans, col = "gray")
plot(df$pow_trans, pch = 1)
lines(df$pow_trans)
dat <- read.table("earthquakes.txt",header=FALSE)
setwd("D:/DTU_winter/02418 - Statistical Modelling/week 11")
dat <- read.table("earthquakes.txt",header=FALSE)
names(dat) <- c("year","eq")
## Plot data
par(mfrow=c(1,2))
tab <- table(dat$eq)
plot(tab,xlim=c(0,45),axes=FALSE,xlab="Count",ylab="Freq")
points(0:45,dpois(0:45,lambda=mean(dat$eq))*dim(dat)[1],pch=19)
mean(dat$eq)
var(dat$eq)
p_month <- 12
lm <- lm(co2 ~ index + sin(2*pi*index/p_month) +
cos(2*pi*index/p_month), data = df_train)
head(df_train)
rm(list=ls())
print(utils::getSrcDirectory(function(){}))
print(utils::getSrcFilename(function(){}, full.names = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(MASS)
library(dplyr)
# library(tsibble)
library(forecast)
df <- read.table("A1_co2.txt", header = TRUE,
sep = " ", dec = ".")
df <- data.frame(index = seq(1, dim(df)[1]), df)
df_train <- df[1:(dim(df)[1]-20),]
df_test <- tail(df, n = 20)
c(dim(df_train), dim(df_test))
p_month <- 12
lm <- lm(co2 ~ index + sin(2*pi*index/p_month) +
cos(2*pi*index/p_month), data = df_train)
p_month <- 12
lm <- lm(co2 ~ index + sin(2*pi*index/p_month) +
cos(2*pi*index/p_month), data = df_train)
xreg <- model.matrix(lm)
arima <- arima(df_train$co2, xreg=xreg[, seq(2, dim(xreg)[2])],
order=c(1,0,0))
acf(arima$residuals)
plot(arima$residuals)
par(mfrow=c(1,1))
acf(arima$residuals)
plot(arima$residuals)
rm(list=ls())
print(utils::getSrcDirectory(function(){}))
print(utils::getSrcFilename(function(){}, full.names = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(MASS)
library(dplyr)
# library(tsibble)
library(forecast)
df <- read.table("A1_co2.txt", header = TRUE,
sep = " ", dec = ".")
df <- data.frame(index = seq(1, dim(df)[1]), df)
df_train <- df[1:(dim(df)[1]-20),]
df_test <- tail(df, n = 20)
c(dim(df_train), dim(df_test))
p_month <- 12
### 1.2 OLS ###
lm_basic_train <- lm(co2 ~ index + sin(2*pi*index/p_month) +
cos(2*pi*index/p_month), data = df_train)
lm_basic_test <- lm(co2 ~ index + sin(2*pi*index/p_month) +
cos(2*pi*index/p_month), data = df_test)
xreg_basic_train <- model.matrix(lm_basic_train)
xreg_basic_test <- model.matrix(lm_basic_test)
# WLS
arima_basic <- arima(df_train$co2, xreg=xreg_basic_train[, seq(2, 4)], order=c(1,0,0))
wls_arima <- arima_basic$coef[c(2, 3, 4, 5)]
par(mfrow=c(1,1))
acf(arima_basic$residuals)
plot(arima_basic$residuals)
predict_wls <- xreg_basic_test %*% wls_arima
fitted_wls <- xreg_basic_train %*% wls_arima
################ 1.2 OLS and WLS ####################
#### 1. Estimate the parameters in OLS - BY HAND
X <- cbind(rep(1, n_train), df_train$time,
sin(2*pi*(df_train$month - 1)/12),
cos(2*pi*(df_train$month - 1)/12))
L <- rbind(
c(1, 0, 0, 0),
c(1, 1, 0, 0),
c(0, 0, cos(2*pi/p_month), sin(2*pi/p_month)),
c(0, 0, -sin(2*pi/p_month), cos(2*pi/p_month))
)
f <- function(j){
return(cbind(1, j, sin(2*pi*j/p_month), cos(2*pi*j/p_month)))
}
lambda <- 0.9
X_N <- matrix(0, nrow =dim(df_train)[1], ncol = dim(f(0))[2])
for (i in 1:dim(df_train)[1]){
X_N[i,] <- f(-dim(df_train)[1] + i)
}
betas_trend <- solve(t(X_N) %*% X_N) %*% t(X_N) %*% df_train$co2
predict_trend <- X_N %*% betas_trend
X_N_test <- matrix(0, nrow = dim(df_test)[1], ncol = dim(f(0))[2])
for (i in 1:dim(df_test)[1]){
X_N_test[i,] <- f(i)
}
# the predictions of the linear trend model are the same as lm R
# we can define the inverse directly since it's just a diagonal matrix
Sigma_local_inverse <- diag(lambda^seq(dim(df_train)[1] - 1, 0))
# checking that it's correct
Sigma_local_inverse[(dim(df_train)[1]- 5):dim(df_train)[1],
(dim(df_train)[1]- 5):dim(df_train)[1]]
# epsilon <- 1e-15
# Epsilon_matrix <- diag(epsilon*seq(dim(df_train)[1], 1)/dim(df_train)[1]))
# # range(svd(solve(Sigma_local + Epsilon_matrix))$d)
# F_N_local <- t(X_N) %*% solve(Sigma_local + Epsilon_matrix) %*% X_N
# h_N_local <- t(X_N) %*% solve(Sigma_local + Epsilon_matrix) %*% df_train$co2
F_N_local <- t(X_N) %*% Sigma_local_inverse %*% X_N
h_N_local <- t(X_N) %*% Sigma_local_inverse %*% df_train$co2
beta_local <- solve(F_N_local) %*% h_N_local
fitted_local <- X_N %*% beta_local
predict_local <- X_N_test %*% beta_local
## PLOTTING
plot(df$co2, type = "l")
lines(c(fitted_wls, predict_wls), col = "red")
lines(c(fitted_local, predict_local), col = "blue")
abline(v = dim(df_train)[1])
legend("topleft",
c("Data","OLS",
"Local"),
col=c("black","red","blue"),lty=1,bty='n',lwd=2)
plot(df$co2, type = "l")
lines(c(fitted_wls, predict_wls), col = "red")
lines(c(fitted_local, predict_local), col = "blue")
abline(v = dim(df_train)[1])
legend("topleft",
c("Data","WLS",
"Local Trend"),
col=c("black","red","blue"),lty=1,bty='n',lwd=2)
rm(list=ls())
print(utils::getSrcDirectory(function(){}))
print(utils::getSrcFilename(function(){}, full.names = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(MASS)
library(dplyr)
dat <- read.table("dioxin.csv", sep=',', head=TRUE)
df <- data.frame(dat)
dim(df)
df
names(df)
head(df)
df$DIOX
hist(df$DIOX)
hist(df$DIOX, breaks = 30)
boxcox(df$DIOX)
hist(log(df$DIOX))
hist(log(df$DIOX), breaks = 30)
?boxcox
boxcox(DIOX ~ 1, data = df)
boxcox <- boxcox(DIOX ~ 1, data = df)
names(boxcox)
?boxcox
device.off()
graphics.off()
boxcox(DIOX ~ 1, data = df)
par(mar=c(1,1,1,1))
boxcox(DIOX ~ 1, data = df)
graphics.off()
boxcox(DIOX ~ 1, data = df)
boxcox(DIOX ~ 1, data = df)
qqnorm(log(df$DIOX))
qqline()
qqline(log(df$DIOX))
qqline(log(df$DIOX), col = "red")
shapiro.test(log(df$DIOX))
range(log(df$DIOX))
min(df$DIOX)
min(log(df$DIOX))
library(nortest)
lillie.test(log(df$DIOX))
?ggpairs
### EDA
pairs(df)
library(GGally)
library(ggplot2)
ggpairs(df)
head(df)
ggpairs(df[, c("DIOX", "QRAT")])
dev.off()
ggpairs(df)
?ggpairs
### EDA
# ggpairs(df)
cor_matrix <- cor(df)
head(df)
### EDA
# ggpairs(df)
df_part <- df[,c("DIOX", "O2", "NEFFEKT", "QRAT")]
unique(df$)
head(df_part)
p <- ggpairs(df_part)
ggparis()
p <- ggpairs(df_part)
p
df_part["diox_trans"] <- log(df_part$DIOX)
p <- ggpairs(df_part)
p
dim(df)
df$DIOX
str(df)
summary(df)
is.na(df)
sum(is.na(df))
# pm <- ggpairs(tips, mapping = aes(color = sex),
#               columns = c("total_bill", "time", "tip"))
## First simple model
lm <- lm(diox_trans ~., data = df_part)
summary(lm)
plot(lm$residuals)
par(mfrow = c(2, 2))
plot(lm, which = 1:4)
par(mar=c(1,1,1,1))
par(mfrow = c(2, 2))
plot(lm, which = 1:4)
par(mfrow = c(1, 1))
p
par(mfrow = c(2, 2))
plot(lm, which = 1:4)
par(mfrow = c(1, 1))
# pm <- ggpairs(tips, mapping = aes(color = sex),
#               columns = c("total_bill", "time", "tip"))
## First simple model
lm <- lm(diox_trans ~. - diox, data = df_part)
# pm <- ggpairs(tips, mapping = aes(color = sex),
#               columns = c("total_bill", "time", "tip"))
## First simple model
lm <- lm(diox_trans ~. - DIOX, data = df_part)
summary(lm)
par(mfrow = c(2, 2))
plot(lm, which = 1:4)
par(mfrow = c(1, 1))
